Personas

características físicas:
peso, altura, color de pelo, color de ojos --> atributos

funcionalidades:
correr(), dormir(), saltar() .... --> métodos

una persona --> objeto (instancia)

class Persona:
   def correr(self):
	print(self.nombre,'está corriendo...')

objeto en curso: self

constructor: __init__
p1 = Persona(....)
p1.correr()

p3.correr()

Relaciones entre clases:
- Herencia: clases con propiedades en común.
	Persona-Empleado: administrador, programador, jefe de proyecto 
	Persona-Guia
- Composición: Un objeto se desglosa, cada parte es un objeto
de otra clase. Ordenador: disco, ram, 
Coche: Motor, chasis

- Asociación: Cuando objetos se relacionan en un instante dado.
 No hay herencia, no composición
c = Coche()
s = SurtidorGas()
c.repostar(s)

--------------------------------------------------------
Python soporta: herencia múltiple y simple
Permite sobrecarga de operadores: 
x = 10
y = 20
x + y

p1 = Persona(...)
p2 = Persona(...)
if p1 < p2:  ### if p1.__lt__(p2)
L = [p1, p2, p3 ...]
L.sort()

-------------------------------------------------------
funciones especiales <---> funciones del lenguaje
__str__()			str()
__len__()			len()
__del__() # destructor		del()
__hash__()			hash()

------------------------------------------------------
objeto.metodo()  --> p1.__str__()
funcion(objeto)	 --> str(p1)

------------------------------------------------------
Lenguaje de POO dinámico: modificar obj. en t.de ejecución
__dict__ dinámico
__slot__ estático

Atributos/métodos:
publicos
__privados

Varios tipos de att.
- de instancia: el peso de una persona
- de clase: conexión internet

Varios tipos de métodos:
- m. de instancia: cumpleaños() self (objeto en curso)
- m. de clase: cls (ref a la clase)
- m. estáticos: no tiene ni self, ni cls

----------------------------------------------------
import abc

class MiClass(abc.ABC):

	@abc.abstractmethod
	def abstracto1(self):
		pass

class Clase2(MiClass):

	def abstracto1(self):
		print(...)

















